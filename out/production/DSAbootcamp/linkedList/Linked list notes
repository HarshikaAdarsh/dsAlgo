Three techniques to solve linked list

1) LEAD-LAG Pointer : two Pointers traverse a Linked list at the same speed but a different interval
Implementation:
                leadLag(L)
                Input: Linked list of nodes rooted at L
                Output: N/A

                lag = L
                lead = L.next.next
                while (lead != Null)
                do{
                lead = lead.next
                lag = lag.next
                }


2) FAST-SLOW Pointers : two pointers traverse a Linked-List at different speeds
Implementation:
               fastSlow(L)
               Input: Linked list of nodes rooted at L
               output: N/A

               fast = L
               slow = L
               while (fast != NULL && fast.next != NULL)
               do{
                   fast = fast.next.next
                   slow = slow.next
               }


3) Linked List Reversal : The head of Linked-List becomes the tail and all pointers are reversed
Implementation:
               reverse(L)
               Input: linked list of nodes rooted at L
               Output: a ptr to the reversed linked list

               prev <-- NULL
               curr, next <-- prev
               prev <-- curr
               curr <--next
               return prev